# Script de migraci√≥n para Gesti√≥n de Usuarios (PowerShell)
# Fecha: 2025-06-29
# Descripci√≥n: Aplicar migraci√≥n de gesti√≥n de usuarios a Supabase

Write-Host "üöÄ Aplicando migraci√≥n de Gesti√≥n de Usuarios..." -ForegroundColor Green

# Verificar si existe la migraci√≥n (prioridad: final > fixed > original)
$MigrationFile = "supabase\migrations\20250629055002_user_management_final.sql"

if (-not (Test-Path $MigrationFile)) {
    Write-Host "‚ö†Ô∏è  Migraci√≥n final no encontrada, probando versi√≥n corregida..." -ForegroundColor Yellow
    $MigrationFile = "supabase\migrations\20250629055001_user_management_fixed.sql"
    
    if (-not (Test-Path $MigrationFile)) {
        Write-Host "‚ö†Ô∏è  Migraci√≥n corregida no encontrada, usando original..." -ForegroundColor Yellow
        $MigrationFile = "supabase\migrations\20250629055000_user_management.sql"
        
        if (-not (Test-Path $MigrationFile)) {
            Write-Host "‚ùå Error: No se encuentra ning√∫n archivo de migraci√≥n v√°lido" -ForegroundColor Red
            exit 1
        }
    }
}

Write-Host "üìÅ Archivo de migraci√≥n encontrado: $MigrationFile" -ForegroundColor Yellow

# Verificar variables de entorno
if (-not $env:SUPABASE_PROJECT_REF -or -not $env:SUPABASE_DB_PASSWORD) {
    Write-Host "‚ö†Ô∏è  Configurando variables de entorno desde .env..." -ForegroundColor Yellow
    
    if (Test-Path ".env") {
        # Leer archivo .env
        $envContent = Get-Content ".env"
        foreach ($line in $envContent) {
            if ($line -match "VITE_SUPABASE_URL=(.+)") {
                $supabaseUrl = $matches[1] -replace '"', ''
                if ($supabaseUrl -match "https://([^.]+)\.") {
                    $env:SUPABASE_PROJECT_REF = $matches[1]
                    Write-Host "‚úÖ SUPABASE_PROJECT_REF extra√≠do: $($env:SUPABASE_PROJECT_REF)" -ForegroundColor Green
                }
            }
        }
    }
    
    if (-not $env:SUPABASE_PROJECT_REF) {
        Write-Host "‚ùå Error: SUPABASE_PROJECT_REF no est√° configurado" -ForegroundColor Red
        Write-Host "üí° Configura las variables:" -ForegroundColor Cyan
        Write-Host "   `$env:SUPABASE_PROJECT_REF = 'tu_project_ref'" -ForegroundColor Cyan
        Write-Host "   `$env:SUPABASE_DB_PASSWORD = 'tu_password'" -ForegroundColor Cyan
        exit 1
    }
}

# Verificar si Supabase CLI est√° instalado
$supabaseCmd = Get-Command supabase -ErrorAction SilentlyContinue
if (-not $supabaseCmd) {
    Write-Host "‚ùå Error: Supabase CLI no est√° instalado" -ForegroundColor Red
    Write-Host "üí° Instala con: npm install -g supabase" -ForegroundColor Cyan
    exit 1
}

Write-Host "üîç Verificando conexi√≥n con Supabase..." -ForegroundColor Yellow

# Aplicar migraci√≥n usando Supabase CLI
Write-Host "üì§ Aplicando migraci√≥n..." -ForegroundColor Yellow

# Opci√≥n 1: Si est√°s usando un proyecto local de Supabase
if (Test-Path "supabase\config.toml") {
    Write-Host "üè† Detectado proyecto local de Supabase" -ForegroundColor Cyan
    $result = & supabase db push
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Migraci√≥n aplicada exitosamente (local)" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Error aplicando migraci√≥n local" -ForegroundColor Red
        exit 1
    }
} else {
    # Opci√≥n 2: Aplicar directamente usando psql (si est√° disponible)
    Write-Host "üåê Aplicando a proyecto remoto..." -ForegroundColor Cyan
    
    # Construir URL de conexi√≥n
    $dbUrl = "postgresql://postgres:$($env:SUPABASE_DB_PASSWORD)@db.$($env:SUPABASE_PROJECT_REF).supabase.co:5432/postgres"
    
    $psqlCmd = Get-Command psql -ErrorAction SilentlyContinue
    if ($psqlCmd) {
        Write-Host "üîó Conectando con psql..." -ForegroundColor Cyan
        $result = & psql $dbUrl -f $MigrationFile
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Migraci√≥n aplicada exitosamente (remoto)" -ForegroundColor Green
        } else {
            Write-Host "‚ùå Error aplicando migraci√≥n remota" -ForegroundColor Red
            exit 1
        }
    } else {
        Write-Host "‚ö†Ô∏è  psql no est√° disponible" -ForegroundColor Yellow
        Write-Host "üí° Opciones:" -ForegroundColor Cyan
        Write-Host "   1. Instalar PostgreSQL client tools" -ForegroundColor Cyan
        Write-Host "   2. Copiar el contenido de $MigrationFile y ejecutarlo manualmente en Supabase Dashboard" -ForegroundColor Cyan
        Write-Host "   3. Usar Supabase CLI con 'supabase db push' en un proyecto inicializado" -ForegroundColor Cyan
        exit 1
    }
}

Write-Host ""
Write-Host "üéâ ¬°Migraci√≥n de Gesti√≥n de Usuarios completada!" -ForegroundColor Green
Write-Host ""
Write-Host "üìã Resumen de lo que se cre√≥:" -ForegroundColor Yellow
Write-Host "   ‚úÖ Tabla user_profiles - Perfiles extendidos de usuario" -ForegroundColor Green
Write-Host "   ‚úÖ Tabla user_roles - Roles de usuario" -ForegroundColor Green
Write-Host "   ‚úÖ Tabla user_permissions - Permisos espec√≠ficos" -ForegroundColor Green
Write-Host "   ‚úÖ Tabla user_sessions - Sesiones de usuario" -ForegroundColor Green
Write-Host "   ‚úÖ Tabla user_activities - Log de actividades" -ForegroundColor Green
Write-Host "   ‚úÖ Vista users_complete - Vista completa de usuarios" -ForegroundColor Green
Write-Host "   ‚úÖ Funci√≥n get_user_stats() - Estad√≠sticas de usuarios" -ForegroundColor Green
Write-Host "   ‚úÖ Pol√≠ticas RLS - Seguridad a nivel de fila" -ForegroundColor Green
Write-Host "   ‚úÖ Triggers - Automatizaci√≥n de logs" -ForegroundColor Green
Write-Host ""
Write-Host "üîß Pr√≥ximos pasos:" -ForegroundColor Cyan
Write-Host "   1. Verificar que los componentes React funcionen correctamente" -ForegroundColor White
Write-Host "   2. Crear un usuario administrador inicial si es necesario" -ForegroundColor White
Write-Host "   3. Configurar roles y permisos seg√∫n tu organizaci√≥n" -ForegroundColor White
Write-Host ""
Write-Host "üìö Documentaci√≥n: Ver MODULO_USUARIOS_DOCUMENTACION.md" -ForegroundColor Cyan
